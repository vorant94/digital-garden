---
import { getCollection, getEntries } from 'astro:content';
import { getImage } from 'astro:assets';
import MainLayout from '@/layouts/MainLayout/MainLayout.astro';
import { PostFrontmatter } from '@/components/PostFrontmatter';
import { Comments } from '@/components/Comments';
import { RelatedPosts } from '@/components/RelatedPosts/RelatedPosts';
import { type Post } from '@/shared/post.helpers';
import { sortEntriesByPublishedAt } from '@/shared/collection.helpers';

export async function getStaticPaths() {
  const posts = sortEntriesByPublishedAt(await getCollection('posts'));

  return await Promise.all(
    posts.map(async (post) => {
      const relatedPosts = post.data.related
        ? sortEntriesByPublishedAt(await getEntries(post.data.related))
        : [];

      return {
        params: { slug: post.slug },
        props: { post, relatedPosts },
      };
    }),
  );
}

interface Props {
  post: Post;
  relatedPosts: Post[];
}

const { post, relatedPosts } = Astro.props;
const { coverImage, title, description } = post.data;

let coverImageSrc: string | undefined;
if (coverImage) {
  const image = await getImage({
    src: coverImage,
    format: coverImage.format,
  });
  coverImageSrc = image.src;
}

const { Content, remarkPluginFrontmatter } = await post.render();
---

<MainLayout
  title={title}
  image={coverImageSrc}
  description={description}
  type="article">
  <article class="prose dark:prose-invert prose-img:mx-auto">
    <PostFrontmatter
      post={post}
      minutesRead={remarkPluginFrontmatter.minutesRead}
    />

    <Content />
  </article>

  {relatedPosts.length > 0 && <RelatedPosts posts={relatedPosts} />}

  <Comments
    post={post}
    client:only="react"
  />
</MainLayout>

<style is:global>
  @media (prefers-color-scheme: dark) {
    .astro-code,
    .astro-code span {
      color: var(--shiki-dark) !important;
      background-color: var(--shiki-dark-bg) !important;
      /* Optional, if you also want font styles */
      font-style: var(--shiki-dark-font-style) !important;
      font-weight: var(--shiki-dark-font-weight) !important;
      text-decoration: var(--shiki-dark-text-decoration) !important;
    }
  }
</style>
