---
import { getCollection, type CollectionEntry, getEntries } from 'astro:content';
import { getImage } from 'astro:assets';
import { PostsService } from '../../shared/PostsService';
import Layout from '../../shared/components/templates/Layout.astro';
import { PostFrontmatter } from '../../shared/components/organisms/PostFrontmatter';
import { Comments } from '../../shared/components/organisms/Comments';
import { RelatedPosts } from '../../shared/components/organisms/RelatedPosts';

export async function getStaticPaths() {
  const entries = PostsService.sortEntries(await getCollection('posts'));

  return await Promise.all(
    entries.map(async (post) => {
      const related = post.data.related
        ? PostsService.sortEntries(await getEntries(post.data.related))
        : [];

      return {
        params: { slug: post.slug },
        props: { post, related },
      };
    }),
  );
}

interface Props {
  post: CollectionEntry<'posts'>;
  related: CollectionEntry<'posts'>[];
}

const { post, related } = Astro.props;
const { coverImage, title } = post.data;

let coverImageSrc: string | undefined;
if (coverImage) {
  const image = await getImage({
    src: coverImage,
    format: coverImage.format,
  });
  coverImageSrc = image.src;
}

const { Content, remarkPluginFrontmatter } = await post.render();
---

<Layout
  title={title}
  image={coverImageSrc}>
  <article class="prose prose-img:mx-auto">
    <PostFrontmatter
      post={post}
      minutesRead={remarkPluginFrontmatter.minutesRead}
    />

    <Content />
  </article>

  {related.length > 0 && <RelatedPosts posts={related} />}

  <Comments post={post} />
</Layout>
