---
import { getCollection, type CollectionEntry, getEntries } from 'astro:content';
import { getImage } from 'astro:assets';
import { PostsService } from '../../shared/posts.service.ts';
import Layout from '../../shared/components/templates/Layout.astro';
import PostContent from '../../shared/components/organisms/PostContent.astro';
import { StandOut } from '../../shared/components/molecules/StandOut';
import PostList from '../../shared/components/organisms/PostList.astro';
import Comments from '../../shared/components/organisms/Comments.astro';

export async function getStaticPaths() {
  const entries = PostsService.sortEntries(await getCollection('posts'));

  return await Promise.all(
    entries.map(async (post) => {
      const related = post.data.related
        ? PostsService.sortEntries(await getEntries(post.data.related))
        : [];

      return {
        params: { slug: post.slug },
        props: { post, related },
      };
    }),
  );
}

interface Props {
  post: CollectionEntry<'posts'>;
  related: CollectionEntry<'posts'>[];
}

const { post, related } = Astro.props;
const { coverImage, title } = post.data;

let coverImageSrc: string | undefined;
if (coverImage) {
  const image = await getImage({
    src: coverImage,
    format: coverImage.format,
  });
  coverImageSrc = image.src;
}
---

<Layout
  title={title}
  image={coverImageSrc}>
  <PostContent post={post} />

  {
    related.length > 0 && (
      <StandOut className="flex-col">
        <details>
          <summary class="text-lg font-medium hover:cursor-pointer">
            Related posts
          </summary>
          <PostList posts={related} />
        </details>
      </StandOut>
    )
  }

  <Comments post={post} />
</Layout>

<style>
  details {
    > summary {
      list-style-type: none;

      &::before {
        font-family: 'Font Awesome 6 Free';
        content: '\f0d7';
      }
    }

    &[open] > summary::before {
      content: '\f0d8';
    }
  }
</style>
